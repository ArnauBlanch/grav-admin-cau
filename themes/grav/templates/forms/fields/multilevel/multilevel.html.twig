{% extends "forms/field.html.twig" %}

{% block global_attributes %}
    data-grav-array-name="{{ (scope ~ field.name)|fieldName }}"
    data-grav-array-keyname="{{ field.placeholder_key|e|tu }}"
    data-grav-array-valuename="{{ field.placeholder_value|e|tu }}"
    {{ parent() }}
{% endblock %}

{% macro renderer(key, content, field, scope, level, parent_key) %}

    {% macro field(value, key, level, globalvars) %}
        <div class="form-row array-field-value_only js__multilevel-field"
            data-grav-array-type="row">
            <input
                type="text"
                name="{{ ('data[' ~ globalvars.field.name ~ ']') ~ key }}"
                placeholder="{{ field.placeholder_value|e|tu }}"
                disabled="disabled"
                style="margin-left: {{ level * 50 }}px"
                value="{{ value }}" />

            <span class="fa fa-minus js__remove-item"></span>
            <span class="fa fa-plus js__add-sibling hidden" data-level="{{level}}"></span>
            <span class="fa fa-plus-circle js__add-children hidden" data-level="{{level}}"></span>
        </div>
    {% endmacro %}

    {% if level == 0 %}
        <div class="element-wrapper">

        {{ _self.field(key, '[' ~ key ~ ']', level, _context) }}

        {% if content is not iterable %}
            {% set level2 = level + 1 %}

            <div class="children-wrapper">
                {{ _self.field(content, key, level2, _context) }}
            </div>
        {% endif %}
    {% endif %}

    {% set level = level + 1 %}
    <div class="children-wrapper">
        {% for key2, content2 in content -%}
            <div class="element-wrapper">
                {% if not is_numeric(key2) %}
                    {{ _self.field(key2, parent_key ~ '[' ~ key2 ~ ']', level, _context) }}
                    {% set level2 = level + 1 %}
                {% else %}
                    {% set level2 = level %}
                {% endif %}

                {% if content2 is not iterable %}
                    {% if not is_numeric(key2) %}
                    <div class="children-wrapper">
                        <div class="element-wrapper">
                    {% endif %}
                            {{ _self.field(content2, parent_key ~ '[' ~ key2 ~ ']', level2, _context) }}
                    {% if not is_numeric(key2) %}
                        </div>
                    </div>
                    {% endif %}
                {% else %}
                    {% set parent_key = parent_key ~ '[' ~ key2 ~ ']' %}
                    {{ _self.renderer(key2, content2, field, scope, level, parent_key) }}
                {% endif %}
            </div>
        {% endfor %}
    </div>

    {% if level == 0 %}
        </div>
    {% endif %}

{% endmacro %}

{% block input %}
{% set unique_identifier = random_string() %}

<script>
var getField = function getField(level, name) {
    levelMargin = level * 50;
    var field = `
        <div class="element-wrapper">
            <div class="form-row array-field-value_only js__multilevel-field"
                data-grav-array-type="row">
                <span data-grav-array-action="sort" class="fa fa-bars"></span>

                <input
                    type="text"
                    name="${name}"
                    disabled="disabled"
                    placeholder="Enter value"
                    style="margin-left: ${levelMargin}px"
                    value="" />

                <span {#data-grav-array-action="rem"#} class="fa fa-minus js__remove-item"></span>
                <span {#data-grav-array-action="add-sibling"#} class="fa fa-plus js__add-sibling hidden" data-level="${level}" ></span>
                <span {#data-grav-array-action="add-children"#} class="fa fa-plus-circle js__add-children hidden" data-level="${level}"></span>
            </div>
        </div>
    `;

    return field;
};


var refreshControls = function refreshControls(unique_identifier) {

    var hideButtons = function hideButtons() {
        $('[data-id="' + unique_identifier + '"] .js__add-sibling').addClass('hidden');
        $('[data-id="' + unique_identifier + '"] .js__add-children').addClass('hidden');
    };

    var restoreAddSiblingButtons = function restoreAddSiblingButtons() {
        $('[data-id="' + unique_identifier + '"] .children-wrapper').each(function() {
            var elements = $(this).children();
            elements.last().each(function() {
                var field = $(this);
                if (!$(this).hasClass('js__multilevel-field')) {
                    field = $(this).find('.js__multilevel-field').first();
                }
                field.find('.js__add-sibling').removeClass('hidden')
            });
        });
    };

    var restoreAddChildrenButtons = function restoreAddChildrenButtons() {
        $('[data-id="' + unique_identifier + '"] .js__multilevel-field').each(function() {
            if ($(this).siblings('.children-wrapper').length === 0 || $(this).siblings('.children-wrapper').find('.js__multilevel-field').length === 0) {
                $(this).find('.js__add-children').removeClass('hidden')
            }
        });
    };

    var processEnabled = function processEnabled() {
        $('[data-id="' + unique_identifier + '"] input').attr('disabled', 'disabled');
        $('[data-id="' + unique_identifier + '"] .js__multilevel-field').each(function() {
            if ($(this).siblings('.children-wrapper').length === 0 || $(this).siblings('.children-wrapper').find('.js__multilevel-field').length === 0) {
                $(this).find('input').attr('disabled', false);
            }
        });
    }

    hideButtons();
    restoreAddSiblingButtons();
    restoreAddChildrenButtons();
    processEnabled();
};

$(document).ready(function() {
    refreshControls("{{unique_identifier}}");
});

$(document).on('click', '[data-id="{{unique_identifier}}"] .js__add-children', function(event) {
    var element = $(this);
    var level = element.data('level') + 1;

    var getParentOfElement = function getParentOfElement(element) {
        var parent = element.closest('.js__multilevel-field').parent().first();
        if (parent.find('.children-wrapper').length === 0) {
            $(parent).append('<div class="children-wrapper"></div>');
        }
        parent = parent.find('.children-wrapper').first();

        return parent;
    }

    var getNameFromParent = function getNameFromParent(parent) {
        if (parent.hasClass('children-wrapper')) {
            parent = parent.siblings('.js__multilevel-field').first().find('input');
        }
        return parent.attr('name') + '[0]';
    };

    var parent = getParentOfElement(element);
    var name = getNameFromParent(parent);
    var field = getField(level, name);

    $(parent).append(field);
    refreshControls("{{unique_identifier}}");
});

/*
TODO:
- Add correct name to new sibling
    - if adding a sibling to a single child, add array number to first child
    - if adding a sibling to a many childs (number already there), just increment number to new child
    - also consider if adding children to parent field
*/

$(document).on('click', '[data-id="{{unique_identifier}}"] .js__add-sibling', function(event) {
    var element = $(this);
    var level = element.data('level');
    element.closest('.children-wrapper').find('.js__add-sibling').addClass('hidden');
    var sibling = element.closest('.children-wrapper').first().find('input').last();

    var getNameFromSibling = function getNameFromSibling(sibling) {
        var name = sibling.attr('name');

        var last_index = name.lastIndexOf('[');
        var almost_there = name.substr(last_index + 1);
        var last_tag = almost_there.substr(0, almost_there.length - 1);

        if ($.isNumeric(last_tag)) {
            name = name.replace('[' + last_tag + ']', '[' + (parseInt(last_tag) + 1) + ']');
        } else {
            sibling.attr('name', name + '[0]');
            name = name + '[1]';
        }

        return name;
    };

    var getParentOfElement = function getParentOfElement(element) {
        var parent = element.closest('.js__multilevel-field').parent().first();
        if (!parent.hasClass('element-wrapper')) {
            parent = parent.find('.element-wrapper').first();
        }

        return parent;
    };

    var parent = getParentOfElement(element);
    var name = getNameFromSibling(sibling);

    var field = getField(level, name);
    $(field).insertAfter(parent);

    refreshControls("{{unique_identifier}}");
});

$(document).on('click', '[data-id="{{unique_identifier}}"] .js__remove-item', function(event) {
    $(this).parents('.element-wrapper').first().remove();
    refreshControls("{{unique_identifier}}");
});

</script>

    {% import _self as multilevel_field %}
    <div data-id="{{unique_identifier}}" data-grav-array-type="container" data-grav-array-mode="value_only"{{ value|length <= 1 ? ' class="one-child"' : '' }}>
        {% if value|length %}
            {% for key, content in value -%}
                {{ multilevel_field.renderer(key, content, field, scope, 0, '[' ~ key ~ ']') }}
            {% endfor %}
        {%- else -%}
            {# Empty value, mock the entry field#}
            {#todo#}
            <div class="form-row" data-grav-array-type="row">
                <span data-grav-array-action="sort" class="fa fa-bars"></span>
                <input
                    type="text"
                    name="{{ (scope ~ field.name)|fieldName }}"
                    {% if field.disabled or isDisabledToggleable %}disabled="disabled"{% endif %}
                    placeholder="{{ field.placeholder_value|e|tu }}" />
                <span data-grav-array-action="rem" class="fa fa-minus"></span>
                <span data-grav-array-action="add" class="fa fa-plus"></span>
            </div>
        {%- endif %}
    </div>

{% endblock %}
